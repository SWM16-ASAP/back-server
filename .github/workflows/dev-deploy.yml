name: Dev Deployment

on:
  push:
    branches: [ develop, feat/security ]

jobs:
  build:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t devsolfe/server:latest .

      - name: Push Docker image to Docker Hub
        run: docker push devsolfe/server:latest

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            docker pull devsolfe/server:latest
            
            if [ "$(docker ps -aq -f name=server)" ]
            then
              echo "[ spring is running ]"
              docker stop server
              docker rm server
            else
              echo "[ spring is not running ]"
            fi
            
            docker run -d \
              --name server \
              -e SPRING_PROFILES_ACTIVE=dev \
              -e 'MONGODB_URI_DEV=${{ secrets.MONGODB_URI_DEV }}' \
              -e MONGODB_DATABASE_DEV=${{ secrets.MONGODB_DATABASE_DEV }} \
              -e S3_REGION_DEV=${{ secrets.S3_REGION_DEV }} \
              -e S3_NAME_DEV=${{ secrets.S3_NAME_DEV }} \
              -e IMPORT_API_KEY=${{ secrets.IMPORT_API_KEY }} \
              -e AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }} \
              -e AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }} \
              -e DISCORD_SUGGESTION_WEBHOOK=${{ secrets.DISCORD_SUGGESTION_WEBHOOK }} \
              -e REDIS_ENDPOINT_DEV=${{ secrets.REDIS_ENDPOINT_DEV }} \
              -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
              -e FIREBASE_CONFIG_BASE64=${{ secrets.FIREBASE_CONFIG_BASE64 }} \
              -p 80:8080 \
              devsolfe/server
            
            docker image prune -f